import nodemailer from 'nodemailer'
import { NextResponse } from 'next/server';

export async function POST(request: Request) {
  const body = await request.json();
  
  // Handle different email types
  if (body.type === 'insights') {
    return handleInsightsEmail(body);
  } else {
    return handleContactEmail(body);
  }
}

async function handleContactEmail(body: any) {
  const { name, email, message } = body;

  if (!name || !email || !message) {
    console.error('Missing required fields:', { name, email, message });
    return NextResponse.json({ message: 'Missing required fields' }, { status: 400 });
  }

  const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST || '',
    port: parseInt(process.env.SMTP_PORT || '587', 10),
    auth: {
      user: process.env.SMTP_USER || '',
      pass: process.env.SMTP_PASS || '',
    },
  });

  const mailOptions = {
    from: process.env.FROM_EMAIL,
    to: 'subhamnaskar671@gmail.com', // Fixed recipient email
    subject: `Contact from ${name} (${email})`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <header style="text-align: center; margin-bottom: 30px; border-bottom: 2px solid #3B82F6; padding-bottom: 20px;">
          <h1 style="color: #1F2937; margin: 0; font-size: 24px;">📧 New Contact Message</h1>
          <p style="color: #6B7280; margin: 10px 0 0 0; font-size: 16px;">Received on ${new Date().toLocaleDateString()}</p>
        </header>
        
        <div style="background: #F8FAFC; padding: 20px; border-radius: 8px; margin-bottom: 30px;">
          <h2 style="color: #374151; margin-top: 0;">📊 Contact Details</h2>
          <table style="width: 100%; border-collapse: collapse;">
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;"><strong>Name:</strong></td>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;">${name}</td>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;"><strong>Email:</strong></td>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;">${email}</td>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;"><strong>Date:</strong></td>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;">${new Date().toLocaleDateString()}</td>
            </tr>
          </table>
        </div>
        
        <div style="background: white; padding: 20px; border-radius: 8px; border: 1px solid #E5E7EB;">
          <h3 style="color: #374151; margin-top: 0;">💬 Message</h3>
          <div style="padding: 15px; background: #F9FAFB; border-radius: 6px; line-height: 1.6; color: #374151;">
            ${message.replace(/\n/g, '<br>')}
          </div>
        </div>
        
        <footer style="margin-top: 30px; text-align: center; padding-top: 20px; border-top: 1px solid #E5E7EB;">
          <p style="color: #6B7280; font-size: 14px; margin: 0;">
            Generated by TradeVision Contact Form
          </p>
          <p style="color: #6B7280; font-size: 12px; margin: 5px 0 0 0;">
            Reply to: ${email}
          </p>
        </footer>
      </div>
    `,
    text: `Contact Message from ${name} (${email})

Date: ${new Date().toLocaleDateString()}

Message:
${message}

Reply to: ${email}
    `,
    replyTo: email,
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log('Contact email sent successfully to subhamnaskar671@gmail.com from:', email);
    return NextResponse.json({ message: 'Contact email sent successfully' }, { status: 200 });
  } catch (err: any) {
    console.error('Failed to send contact email:', err);
    return NextResponse.json({ message: 'Failed to send contact email', error: err.message }, { status: 500 });
  }
}

async function handleInsightsEmail(body: any) {
  const { insights, recipientEmail, dataCount, dateRange, filters } = body;

  if (!insights || !recipientEmail) {
    console.error('Missing required fields for insights email:', { insights: !!insights, recipientEmail });
    return NextResponse.json({ message: 'Missing required fields' }, { status: 400 });
  }

  const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST || '',
    port: parseInt(process.env.SMTP_PORT || '587', 10),
    auth: {
      user: process.env.SMTP_USER || '',
      pass: process.env.SMTP_PASS || '',
    },
  });

  // Format insights for email
  const formattedInsights = formatInsightsForEmail(insights, dataCount, dateRange, filters);

  const mailOptions = {
    from: process.env.FROM_EMAIL,
    to: recipientEmail,
    subject: `AI Trading Insights - ${dataCount} Trades Analysis`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
        <header style="text-align: center; margin-bottom: 30px; border-bottom: 2px solid #3B82F6; padding-bottom: 20px;">
          <h1 style="color: #1F2937; margin: 0; font-size: 28px;">🎯 AI Trading Insights Report</h1>
          <p style="color: #6B7280; margin: 10px 0 0 0; font-size: 16px;">Generated on ${new Date().toLocaleDateString()}</p>
        </header>
        
        <div style="background: #F8FAFC; padding: 20px; border-radius: 8px; margin-bottom: 30px;">
          <h2 style="color: #374151; margin-top: 0;">📊 Analysis Summary</h2>
          <table style="width: 100%; border-collapse: collapse;">
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;"><strong>Total Trades:</strong></td>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;">${dataCount}</td>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;"><strong>Date Range:</strong></td>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;">${dateRange}</td>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;"><strong>Applied Filters:</strong></td>
              <td style="padding: 8px; border-bottom: 1px solid #E5E7EB;">${filters}</td>
            </tr>
          </table>
        </div>
        
        <div style="background: white; padding: 20px; border-radius: 8px; border: 1px solid #E5E7EB;">
          ${formattedInsights}
        </div>
        
        <footer style="margin-top: 30px; text-align: center; padding-top: 20px; border-top: 1px solid #E5E7EB;">
          <p style="color: #6B7280; font-size: 14px; margin: 0;">
            Generated by TradeVision AI Trading Analytics Platform
          </p>
          <p style="color: #6B7280; font-size: 12px; margin: 5px 0 0 0;">
            This report was automatically generated from your trading dashboard data.
          </p>
        </footer>
      </div>
    `,
    text: `AI Trading Insights Report
    
Analysis Summary:
- Total Trades: ${dataCount}
- Date Range: ${dateRange}
- Applied Filters: ${filters}

${insights}

Generated by TradeVision AI Trading Analytics Platform
Generated on ${new Date().toLocaleDateString()}
    `,
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log('Insights email sent successfully to:', recipientEmail);
    return NextResponse.json({ message: 'Insights email sent successfully' }, { status: 200 });
  } catch (err: any) {
    console.error('Failed to send insights email:', err);
    return NextResponse.json({ message: 'Failed to send insights email', error: err.message }, { status: 500 });
  }
}

function formatInsightsForEmail(insights: string, dataCount: number, dateRange: string, filters: string): string {
  // Convert markdown-style insights to HTML
  const sections = insights.split('## ').filter(section => section.trim());
  
  let html = '';
  
  sections.forEach((section, index) => {
    const lines = section.split('\n').filter(line => line.trim());
    const title = lines[0];
    const content = lines.slice(1).join('\n');
    
    // Get appropriate emoji and color based on section title
    let emoji = '📊';
    let color = '#3B82F6';
    
    if (title.includes('🎯')) {
      emoji = '🎯';
      color = '#10B981';
    } else if (title.includes('📈')) {
      emoji = '📈';
      color = '#059669';
    } else if (title.includes('💡')) {
      emoji = '💡';
      color = '#F59E0B';
    } else if (title.includes('⚠️')) {
      emoji = '⚠️';
      color = '#EF4444';
    } else if (title.includes('🔮')) {
      emoji = '🔮';
      color = '#8B5CF6';
    }
    
    html += `
      <div style="margin-bottom: 30px;">
        <h3 style="color: ${color}; margin: 0 0 15px 0; padding: 10px; background: ${color}15; border-radius: 6px; font-size: 18px;">
          ${emoji} ${title.replace(/[🎯📈💡⚠️🔮📊]/g, '').trim()}
        </h3>
        <div style="padding: 0 15px; line-height: 1.6; color: #374151;">
          ${content.replace(/\n\n/g, '</p><p style="margin: 15px 0;">').replace(/\n/g, '<br>')}
        </div>
      </div>
    `;
  });
  
  return html || '<p>No insights available at this time.</p>';
}